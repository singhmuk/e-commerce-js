{"ast":null,"code":"var _jsxFileName = \"/home/mukeshs/MERN/Projects/ecommerce/amazona/frontend/src/screens/MapScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libs = ['places'];\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nexport default function MapScreen(props) {\n  _s();\n\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await Axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const dispatch = useDispatch();\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      // dispatch select action\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('location selected successfully.');\n      navigate('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-container\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"smaple-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 15,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-input-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"primary\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MapScreen, \"awI+aL/uM4ZxfBJogPxIxkMCcqk=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n\n_c = MapScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"sources":["/home/mukeshs/MERN/Projects/ecommerce/amazona/frontend/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","LoadingBox","Axios","USER_ADDRESS_MAP_CONFIRM","useDispatch","useNavigate","libs","defaultLocation","lat","lng","MapScreen","props","navigate","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  LoadScript,\n  GoogleMap,\n  StandaloneSearchBox,\n  Marker,\n} from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nconst libs = ['places'];\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\n\nexport default function MapScreen(props) {\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await Axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n    fetch();\n  }, []);\n\n  const onLoad = (map) => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = (marker) => {\n    markerRef.current = marker;\n  };\n  const onLoadPlaces = (place) => {\n    placeRef.current = place;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng(),\n    });\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({ lat: place.lat(), lng: place.lng() });\n    setLocation({ lat: place.lat(), lng: place.lng() });\n  };\n  const dispatch = useDispatch();\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n    if (places && places.length === 1) {\n      // dispatch select action\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id,\n        },\n      });\n      alert('location selected successfully.');\n      navigate('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? (\n    <div className=\"full-container\">\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n        <GoogleMap\n          id=\"smaple-map\"\n          mapContainerStyle={{ height: '100%', width: '100%' }}\n          center={center}\n          zoom={15}\n          onLoad={onLoad}\n          onIdle={onIdle}\n        >\n          <StandaloneSearchBox\n            onLoad={onLoadPlaces}\n            onPlacesChanged={onPlacesChanged}\n          >\n            <div className=\"map-input-box\">\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\n              <button type=\"button\" className=\"primary\" onClick={onConfirm}>\n                Confirm\n              </button>\n            </div>\n          </StandaloneSearchBox>\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  ) : (\n    <LoadingBox></LoadingBox>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}